#!/usr/bin/env perl
#
# path:       /usr/bin/instamenu_desktop
# author:     The-Repo-Club [wayne6324@gmail.com]
# github:     https://github.com/The-Repo-Club/instamenu
# date:       2021-01-03 12:34:47.440579
#
# No dependencies except for perl ≥ v5.32

use strict;
use warnings qw(FATAL utf8);
use Data::Dumper;
use IPC::Open2;
use POSIX qw(locale_h);
use File::Find;
use File::Basename qw(basename);
use File::Temp qw(tempfile);
use List::Util 'first';
use Getopt::Long;
use Pod::Usage;
use v5.10;
use utf8;
use open ':encoding(UTF-8)';

binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

# reads in a whole file
sub slurp {
    my ($filename) = @_;
    my $fh;
    if (!open($fh, '<', $filename)) {
        warn "Could not open $filename: $!";
        return undef;
    }
    local $/;
    my $result;
    eval {
        $result = <$fh>;
    };
    if ($@) {
        warn "Could not read $filename: $@";
        return undef;
    } else {
        return $result;
    }
}

my @entry_types;
my $instamenu_cmd = 'instamenu -h 50 -i -l 10 -w 400 -x 10 -y 36 -p "Launcher" -q "Launch a app"';
my $result = GetOptions(
    'instamenu=s' => \$instamenu_cmd,
    'entry-type=s' => \@entry_types,
    'version' => sub {
        say "instamenu_desktop 2021.04.17 © 2021 TheRepoClub";
        exit 0;
    },
    'help' => sub {
        pod2usage(-exitval => 0);
    });

die "Could not parse command line options" unless $result;

# Filter entry types and set default type(s) if none selected
my $valid_types = {
    name => 1,
    command => 1,
    filename => 1,
};
@entry_types = grep { exists($valid_types->{$_}) } @entry_types;
@entry_types = ('name', 'command') unless @entry_types;

# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃ Convert LC_MESSAGES into an ordered list of suffixes to search for in the ┃
# ┃ .desktop files (e.g. “Name[de_DE@euro]” for LC_MESSAGES=de_DE.UTF-8@euro  ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

# For details on how the transformation of LC_MESSAGES to a list of keys that
# should be looked up works, refer to “Localized values for keys” of the
# “Desktop Entry Specification”:
# https://standards.freedesktop.org/desktop-entry-spec/latest/ar01s04.html
my $lc_messages = setlocale(LC_MESSAGES);

# Ignore the encoding (e.g. .UTF-8)
$lc_messages =~ s/\.[^@]+//g;

my @suffixes = ($lc_messages);

# _COUNTRY and @MODIFIER are present
if ($lc_messages =~ /_[^@]+@/) {
    my $no_modifier = $lc_messages;
    $no_modifier =~ s/@.*//g;
    push @suffixes, $no_modifier;

    my $no_country = $lc_messages;
    $no_country =~ s/_[^@]+//g;
    push @suffixes, $no_country;
}

# Strip _COUNTRY and @MODIFIER if present
$lc_messages =~ s/[_@].*//g;
push @suffixes, $lc_messages;

# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃ Read all .desktop files and store the values in which we are interested.  ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

my %desktops;
# See https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html#variables
my $xdg_data_home = $ENV{XDG_DATA_HOME};
$xdg_data_home = $ENV{HOME} . '/.local/share' if
    !defined($xdg_data_home) ||
    $xdg_data_home eq '' ||
    ! -d $xdg_data_home;

my $xdg_data_dirs = $ENV{XDG_DATA_DIRS};
$xdg_data_dirs = '/usr/local/share/applications/:/usr/share/applications/' if
    !defined($xdg_data_dirs) ||
    $xdg_data_dirs eq '';

my @searchdirs = ("$xdg_data_home/applications/");
for my $dir (split(':', $xdg_data_dirs)) {
    push @searchdirs, "$dir";
}

# Cleanup the paths, maybe some application does not cope with double slashes
# (the field code %k is replaced with the .desktop file location).
@searchdirs = map { s,//,/,g; $_ } @searchdirs;
# Also remove any trailing slashes.
@searchdirs = map { s,/*$,,g; $_ } @searchdirs;

# To avoid errors by File::Find’s find(), only pass existing directories.
@searchdirs = grep { -d $_ } @searchdirs;

find(
    {
        wanted => sub {
            return unless substr($_, -1 * length('.desktop')) eq '.desktop';
            my $relative = $File::Find::name;

            # Find and then replace the directory in @searchdirs in which the
            # current file is located. We used to do this with
            # $File::Find::topdir but it is not supported when using the
            # 'follow' or 'follow_fast' options.
            # See #3973, #4031.
            my $topdir = first { substr($relative, 0, length($_)) eq $_ } @searchdirs;

            # + 1 for the trailing /, which is missing in $topdir.
            substr($relative, 0, length($topdir) + 1) = '';

            # Don’t overwrite files with the same relative path, we search in
            # descending order of importance.
            return if exists($desktops{$relative});

            $desktops{$relative} = $File::Find::name;
        },
        no_chdir => 1,
        follow_fast => 1,
    },
    @searchdirs
);

my %apps;

for my $file (values %desktops) {
    my $base = basename($file);

    # _ is an invalid character for a key, so we can use it for our own keys.
    $apps{$base}->{_Location} = $file;

    # Extract all “Name” and “Exec” keys from the [Desktop Entry] group
    # and store them in $apps{$base}.
    my %names;
    my $content = slurp($file);
    next unless defined($content);
    my @lines = split("\n", $content);
    for my $line (@lines) {
        my $first = substr($line, 0, 1);
        next if $line eq '' || $first eq '#';
        next unless ($line eq '[Desktop Entry]' ..
                     ($first eq '[' &&
                      substr($line, -1) eq ']' &&
                      $line ne '[Desktop Entry]'));
        next if $first eq '[';

        my ($key, $value) = ($line =~ /^
          (
            [A-Za-z0-9-]+  # the spec specifies these as valid key characters
            (?:\[[^]]+\])? # possibly, there as a locale suffix
          )
          \s* = \s*        # whitespace around = should be ignored
          (.*)             # no restrictions on the values
          $/x);

        if ($key =~ /^Name/) {
            $names{$key} = $value;
        } elsif ($key eq 'Exec' ||
                 $key eq 'TryExec' ||
                 $key eq 'Path' ||
                 $key eq 'Type') {
            $apps{$base}->{$key} = $value;
        } elsif ($key eq 'NoDisplay' ||
                 $key eq 'Hidden' ||
                 $key eq 'StartupNotify' ||
                 $key eq 'Terminal') {
            # Values of type boolean must either be string true or false,
            # see “Possible value types”:
            # https://standards.freedesktop.org/desktop-entry-spec/latest/ar01s03.html
            $apps{$base}->{$key} = ($value eq 'true');
        }
    }

    for my $suffix (@suffixes) {
        next unless exists($names{"Name[$suffix]"});
        $apps{$base}->{Name} = $names{"Name[$suffix]"};
        last;
    }

    # Fallback to unlocalized “Name”.
    $apps{$base}->{Name} = $names{Name} unless exists($apps{$base}->{Name});
}

# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃ Turn %apps inside out to provide Name → filename lookup.                  ┃
# ┃ The Name is what we display in instamenu later.                           ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

my %choices;
for my $app (keys %apps) {
    my $name = $apps{$app}->{Name};

    # Don’t try to use .desktop files which don’t have Type=application
    next if (!exists($apps{$app}->{Type}) ||
             $apps{$app}->{Type} ne 'Application');

    # Skip broken files (Type=application, but no Exec key).
    if (!exists($apps{$app}->{Exec}) ||
        $apps{$app}->{Exec} eq '') {
        warn 'File ' . $apps{$app}->{_Location} . ' is broken: it contains Type=Application, but no Exec key/value pair.';
        next;
    }

    # Don’t offer apps which have NoDisplay == true or Hidden == true.
    # See https://wiki.xfce.org/howto/customize-menu#hide_menu_entries
    # for the difference between NoDisplay and Hidden.
    next if (exists($apps{$app}->{NoDisplay}) && $apps{$app}->{NoDisplay}) ||
            (exists($apps{$app}->{Hidden}) && $apps{$app}->{Hidden});

    if (exists($apps{$app}->{TryExec})) {
        my $tryexec = $apps{$app}->{TryExec};
        if (substr($tryexec, 0, 1) eq '/') {
            # Skip if absolute path is not executable.
            next unless -x $tryexec;
        } else {
            # Search in $PATH for the executable.
            my $found = 0;
            for my $path (split(':', $ENV{PATH})) {
                next unless -x "$path/$tryexec";
                $found = 1;
                last;
            }
            next unless $found;
        }
    }

    if ((scalar grep { $_ eq 'name' } @entry_types) > 0) {
        if (exists($choices{$name})) {
            # There are two .desktop files which contain the same “Name” value.
            # I’m not sure if that is allowed to happen, but we disambiguate the
            # situation by appending “ (2)”, “ (3)”, etc. to the name.
            #
            # An example of this happening is exo-file-manager.desktop and
            # thunar-settings.desktop, both of which contain “Name=File Manager”.
            my $inc = 2;
            $inc++ while exists($choices{"$name ($inc)"});
            $name = "$name ($inc)";
        }

        $choices{$name} = $app;
        next;
    }

    if ((scalar grep { $_ eq 'command' } @entry_types) > 0) {
        my $command = $apps{$app}->{Exec};

        # Handle escape sequences (should be done for all string values, but does
        # matter here).
        my %escapes = (
            '\\s' => ' ',
            '\\n' => '\n',
            '\\t' => '\t',
            '\\r' => '\r',
            '\\\\' => '\\',
        );
        $command =~ s/(\\[sntr\\])/$escapes{$1}/go;

        # Extract executable
        if ($command =~ m/^\s*([^\s\"]+)(?:\s|$)/) {
            # No quotes
            $command = $1;
        } elsif ($command =~ m/^\s*\"([^\"\\]*(?:\\.[^\"\\]*)*)\"(?:\s|$)/) {
            # Quoted, remove quotes and fix escaped characters
            $command = $1;
            $command =~ s/\\([\"\`\$\\])/$1/g;
        } else {
            # Invalid quotes, fallback to whitespace
            ($command) = split(' ', $command);
        }

        # Don’t add “geany” if “Geany” is already present.
        my @keys = map { lc } keys %choices;
        if (!(scalar grep { $_ eq lc(basename($command)) } @keys) > 0) {
            $choices{basename($command)} = $app;
        }
        next;
    }

    if ((scalar grep { $_ eq 'filename' } @entry_types) > 0) {
        my $filename = basename($app, '.desktop');

        # Don’t add “geany” if “Geany” is already present.
        my @keys = map { lc } keys %choices;
        next if (scalar grep { $_ eq lc($filename) } @keys) > 0;

        $choices{$filename} = $app;
    }
}

# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃ Run instamenu to ask the user for their choice                            ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

# open2 will just make instamenu’s STDERR go to our own STDERR.
my ($instamenu_out, $instamenu_in);
my $pid = eval {
    open2($instamenu_out, $instamenu_in, $instamenu_cmd);
} or do {
    print STDERR "$@";
    say STDERR "Running instamenu failed. Is instamenu installed at all? Try running instamenu -v";
    exit 1;
};

binmode $instamenu_in, ':utf8';
binmode $instamenu_out, ':utf8';

# Feed instamenu the possible choices.
say $instamenu_in $_ for sort keys %choices;
close($instamenu_in);

waitpid($pid, 0);
my $status = ($? >> 8);

# Pass on instamenu’s exit status if there was an error.
exit $status unless $status == 0;

my $choice = <$instamenu_out>;
# instamenu ≥ 4.4 adds a newline after the choice
chomp($choice);
my $app;
# Exact match: the user chose “Avidemux (GTK+)”
if (exists($choices{$choice})) {
    $app = $apps{$choices{$choice}};
    $choice = '';
} else {
    # Not an exact match: the user entered “Avidemux (GTK+) ~/movie.mp4”
    for my $possibility (keys %choices) {
        next unless substr($choice, 0, length($possibility)) eq $possibility;
        $app = $apps{$choices{$possibility}};
        substr($choice, 0, length($possibility)) = '';
        # Remove whitespace separating the entry and arguments.
        $choice =~ s/^\s//g;
        last;
    }
    if (!defined($app)) {
        warn "Invalid input: “$choice” does not match any application. Trying to execute nevertheless.";
        $app->{Name} = '';
        $app->{Exec} = $choice;
        # We assume that the app is old and does not support startup
        # notifications because it doesn’t ship a desktop file.
        $app->{StartupNotify} = 0;
        $app->{_Location} = '';
    }
}

# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃ Make instamenu start the chosen application.                              ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

my $name = $app->{Name};
my $exec = $app->{Exec};
my $location = $app->{_Location};

# Quote as described by “The Exec key”:
# https://standards.freedesktop.org/desktop-entry-spec/latest/ar01s06.html
sub quote {
    my ($str) = @_;
    $str =~ s/("|`|\$|\\)/\\$1/g;
    $str = qq|"$str"| if $str ne "";
    return $str;
}

$choice = quote($choice);
$location = quote($location);
$name = quote($name);

# Remove deprecated field codes, as the spec dictates.
$exec =~ s/%[dDnNvm]//g;

# Replace filename field codes with the rest of the command line.
# Note that we assume the user uses precisely one file name,
# not multiple file names.
$exec =~ s/%[fF]/$choice/g;

# If the program works with URLs,
# we assume the user provided a URL instead of a filename.
# As per the spec, there must be at most one of %f, %u, %F or %U present.
$exec =~ s/%[uU]/$choice/g;

# The translated name of the application.
$exec =~ s/%c/$name/g;

# XXX: Icons are not implemented. Is the complexity (looking up the path if
# only a name is given) actually worth it?
#$exec =~ s/%i/--icon $icon/g;
$exec =~ s/%i//g;

# location of .desktop file
$exec =~ s/%k/$location/g;

# Literal % characters are represented as %%.
$exec =~ s/%%/%/g;

if (exists($app->{Path}) && $app->{Path} ne '') {
    $exec = 'cd ' . quote($app->{Path}) . ' && ' . $exec;
}

my $nosn = '';
my $cmd;
$cmd = qq|exec $nosn "$exec"|;
